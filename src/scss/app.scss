@charset "utf-8";

// ==========================================================================
// 「node_modules」から読み込み
// ==========================================================================
@import "~node-reset-scss/scss/_reset";
// @import "~bootstrap/scss/bootstrap";		// app.js内の記述・ファイル読み込みも必要
// @import "_reset-css-remedy";

// ==========================================================================
// 「scss」内から読み込み
// ==========================================================================
// sass-mixin(function)
@import "_variables";			// 数値等の変数定義一式
@import "_mixins";				// メディアクエリ用設定

// CSS設計はFLOCSSを採用

// ==========================================================================
// Foundation
// ==========================================================================
// Reset.cssやNormalize.cssなどを用いたブラウザのデフォルトスタイルの初期化や、プロジェクトにおける基本的なスタイルを定義

@import "foundation/_reset";
@import "foundation/_base";

// ==========================================================================
// Layout（l-*）
// ==========================================================================
// ページを構成するヘッダーやメインのコンテンツエリア、サイドバーやフッターといったプロジェクト共通のコンテナーブロックのスタイルを定義

@import "layout/_l-header";
@import "layout/_l-container";
@import "layout/_l-main";
@import "layout/_l-sidebar";
@import "layout/_l-footer";

// ==========================================================================
// Object
// ==========================================================================
// OOCSSのコンセプトを元に、プロジェクトにおける繰り返されるビジュアルパターンをすべてObjectと定義

	// -----------------------------------------------------------------
	// Component（c-*）
	// -----------------------------------------------------------------
	// 再利用できるパターンとして、小さな単位のモジュールを定義

	@import "object/component/_c-header";
	@import "object/component/_c-sidebar";
	@import "object/component/_c-footer";

	// -----------------------------------------------------------------
	// Project（p-*）
	// -----------------------------------------------------------------
	// プロジェクト固有のパターンであり、いくつかのComponentと、それに該当しない要素によって構成されるものを定義

	// @import "object/project/_xxxxx";

	// -----------------------------------------------------------------
	// Utility（u-*）
	// -----------------------------------------------------------------
	// ComponentとProjectレイヤーのObjectのモディファイアで解決することが難しい・適切では無い、わずかなスタイルの調整のための便利クラスを定義

	@import "object/utility/_margin-padding";
	@import "object/utility/_font-size";

	// デバッグ時だけONにする
	@import "object/utility/_debug";


// ==========================================================================
// memo
// ==========================================================================
// https://github.com/hiloki/flocss
// https://blog.yuhiisk.com/archive/2018/05/07/responsive-css-architecture.html

// 命名規則 - MindBEMding … BEMシステムのシンタックスである、Block、Element、Modifierに分類して構成される規則を採用します。
// FLOCSSでは、オリジナルのBEMのシンタックスではなく、MindBEMding のアイデアを基本的にそのまま取り入れています。

	// // Good
	// .block {} // 親要素
	// .block__element {} // 子要素
	// .block--modifier {} // 親要素のバージョン違い
	// .block__element--modifier {} // 子要素のバージョン違い

	// // Bad
	// .block {}
	// .block .block__element {}
	// .block .block--modifier {}
	// .block .block__element--modifier {}


// 接頭辞（プレフィックス）
	// Layout - .l-*

	// Objectのプレフィックス
	// Objectレイヤーの中で分類されるモジュールに対し、役割を明確にするためにプレフィックスをつけることを推奨します。
		// Component - .c-*
		// Project - .p-*
		// Utility - .u-*

// c- 			 … Componentレイヤーのコンポーネントあることを示します
// p- 			 … Projectレイヤーのコンポーネントであることを示します
// u- 			 … Utilityレイヤーのコンポーネントであることを示します
// js- 			 … JavaScriptのフックとして使用されるclassやIDであることを示します（CSSでスタイルは指定しない）
// is-, has- 	 … 要素の表示の切り替えなどの状態の変化があることを示します
// t- 			 … Themeレイヤーのコンポーネントであることを示します。
// s- 			 … Scopeレイヤーのコンポーネントであることを示します。
// qa-, t- 		 … QA/Testレイヤーのコンポーネントであることを示します。

